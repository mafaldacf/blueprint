// Code generated by Thrift Compiler (0.21.0). DO NOT EDIT.

package movieinfoservice

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - MovieID
//  - Title
//  - Casts
// 
type MovieInfo struct {
	MovieID string `thrift:"MovieID,1" db:"MovieID" json:"MovieID"`
	Title string `thrift:"Title,2" db:"Title" json:"Title"`
	Casts string `thrift:"Casts,3" db:"Casts" json:"Casts"`
}

func NewMovieInfo() *MovieInfo {
	return &MovieInfo{}
}



func (p *MovieInfo) GetMovieID() string {
	return p.MovieID
}



func (p *MovieInfo) GetTitle() string {
	return p.Title
}



func (p *MovieInfo) GetCasts() string {
	return p.Casts
}

func (p *MovieInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MovieInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MovieID = v
	}
	return nil
}

func (p *MovieInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *MovieInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Casts = v
	}
	return nil
}

func (p *MovieInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "MovieInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MovieInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MovieID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MovieID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MovieID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MovieID: ", p), err)
	}
	return err
}

func (p *MovieInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Title", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Title: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Title (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Title: ", p), err)
	}
	return err
}

func (p *MovieInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Casts", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Casts: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Casts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Casts (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Casts: ", p), err)
	}
	return err
}

func (p *MovieInfo) Equals(other *MovieInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MovieID != other.MovieID { return false }
	if p.Title != other.Title { return false }
	if p.Casts != other.Casts { return false }
	return true
}

func (p *MovieInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MovieInfo(%+v)", *p)
}

func (p *MovieInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*movieinfoservice.MovieInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*MovieInfo)(nil)

func (p *MovieInfo) Validate() error {
	return nil
}

// Attributes:
//  - ReqID
//  - MovieID
//  - Title
//  - Casts
// 
type MovieInfoService_WriteMovieInfo_Request struct {
	ReqID int64 `thrift:"reqID,1" db:"reqID" json:"reqID"`
	MovieID string `thrift:"movieID,2" db:"movieID" json:"movieID"`
	Title string `thrift:"title,3" db:"title" json:"title"`
	Casts string `thrift:"casts,4" db:"casts" json:"casts"`
}

func NewMovieInfoService_WriteMovieInfo_Request() *MovieInfoService_WriteMovieInfo_Request {
	return &MovieInfoService_WriteMovieInfo_Request{}
}



func (p *MovieInfoService_WriteMovieInfo_Request) GetReqID() int64 {
	return p.ReqID
}



func (p *MovieInfoService_WriteMovieInfo_Request) GetMovieID() string {
	return p.MovieID
}



func (p *MovieInfoService_WriteMovieInfo_Request) GetTitle() string {
	return p.Title
}



func (p *MovieInfoService_WriteMovieInfo_Request) GetCasts() string {
	return p.Casts
}

func (p *MovieInfoService_WriteMovieInfo_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MovieInfoService_WriteMovieInfo_Request) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqID = v
	}
	return nil
}

func (p *MovieInfoService_WriteMovieInfo_Request) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MovieID = v
	}
	return nil
}

func (p *MovieInfoService_WriteMovieInfo_Request) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *MovieInfoService_WriteMovieInfo_Request) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Casts = v
	}
	return nil
}

func (p *MovieInfoService_WriteMovieInfo_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "MovieInfoService_WriteMovieInfo_Request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MovieInfoService_WriteMovieInfo_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqID: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqID: ", p), err)
	}
	return err
}

func (p *MovieInfoService_WriteMovieInfo_Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "movieID", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:movieID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.movieID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:movieID: ", p), err)
	}
	return err
}

func (p *MovieInfoService_WriteMovieInfo_Request) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err)
	}
	return err
}

func (p *MovieInfoService_WriteMovieInfo_Request) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "casts", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:casts: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Casts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.casts (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:casts: ", p), err)
	}
	return err
}

func (p *MovieInfoService_WriteMovieInfo_Request) Equals(other *MovieInfoService_WriteMovieInfo_Request) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ReqID != other.ReqID { return false }
	if p.MovieID != other.MovieID { return false }
	if p.Title != other.Title { return false }
	if p.Casts != other.Casts { return false }
	return true
}

func (p *MovieInfoService_WriteMovieInfo_Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MovieInfoService_WriteMovieInfo_Request(%+v)", *p)
}

func (p *MovieInfoService_WriteMovieInfo_Request) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*movieinfoservice.MovieInfoService_WriteMovieInfo_Request",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*MovieInfoService_WriteMovieInfo_Request)(nil)

func (p *MovieInfoService_WriteMovieInfo_Request) Validate() error {
	return nil
}

// Attributes:
//  - Ret0
// 
type MovieInfoService_WriteMovieInfo_Response struct {
	Ret0 *MovieInfo `thrift:"ret0,1" db:"ret0" json:"ret0"`
}

func NewMovieInfoService_WriteMovieInfo_Response() *MovieInfoService_WriteMovieInfo_Response {
	return &MovieInfoService_WriteMovieInfo_Response{}
}

var MovieInfoService_WriteMovieInfo_Response_Ret0_DEFAULT *MovieInfo

func (p *MovieInfoService_WriteMovieInfo_Response) GetRet0() *MovieInfo {
	if !p.IsSetRet0() {
		return MovieInfoService_WriteMovieInfo_Response_Ret0_DEFAULT
	}
	return p.Ret0
}

func (p *MovieInfoService_WriteMovieInfo_Response) IsSetRet0() bool {
	return p.Ret0 != nil
}

func (p *MovieInfoService_WriteMovieInfo_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MovieInfoService_WriteMovieInfo_Response) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ret0 = &MovieInfo{}
	if err := p.Ret0.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ret0), err)
	}
	return nil
}

func (p *MovieInfoService_WriteMovieInfo_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "MovieInfoService_WriteMovieInfo_Response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MovieInfoService_WriteMovieInfo_Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ret0", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ret0: ", p), err)
	}
	if err := p.Ret0.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ret0), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ret0: ", p), err)
	}
	return err
}

func (p *MovieInfoService_WriteMovieInfo_Response) Equals(other *MovieInfoService_WriteMovieInfo_Response) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Ret0.Equals(other.Ret0) { return false }
	return true
}

func (p *MovieInfoService_WriteMovieInfo_Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MovieInfoService_WriteMovieInfo_Response(%+v)", *p)
}

func (p *MovieInfoService_WriteMovieInfo_Response) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*movieinfoservice.MovieInfoService_WriteMovieInfo_Response",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*MovieInfoService_WriteMovieInfo_Response)(nil)

func (p *MovieInfoService_WriteMovieInfo_Response) Validate() error {
	return nil
}

type MovieInfoService interface {
	// Parameters:
	//  - Req
	// 
	WriteMovieInfo(ctx context.Context, req *MovieInfoService_WriteMovieInfo_Request) (_r *MovieInfoService_WriteMovieInfo_Response, _err error)
}

type MovieInfoServiceClient struct {
	c thrift.TClient
	meta thrift.ResponseMeta
}

func NewMovieInfoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MovieInfoServiceClient {
	return &MovieInfoServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMovieInfoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MovieInfoServiceClient {
	return &MovieInfoServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMovieInfoServiceClient(c thrift.TClient) *MovieInfoServiceClient {
	return &MovieInfoServiceClient{
		c: c,
	}
}

func (p *MovieInfoServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MovieInfoServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *MovieInfoServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - Req
// 
func (p *MovieInfoServiceClient) WriteMovieInfo(ctx context.Context, req *MovieInfoService_WriteMovieInfo_Request) (_r *MovieInfoService_WriteMovieInfo_Response, _err error) {
	var _args0 MovieInfoServiceWriteMovieInfoArgs
	_args0.Req = req
	var _result2 MovieInfoServiceWriteMovieInfoResult
	var _meta1 thrift.ResponseMeta
	_meta1, _err = p.Client_().Call(ctx, "WriteMovieInfo", &_args0, &_result2)
	p.SetLastResponseMeta_(_meta1)
	if _err != nil {
		return
	}
	if _ret3 := _result2.GetSuccess(); _ret3 != nil {
		return _ret3, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "WriteMovieInfo failed: unknown result")
}

type MovieInfoServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler MovieInfoService
}

func (p *MovieInfoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MovieInfoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MovieInfoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMovieInfoServiceProcessor(handler MovieInfoService) *MovieInfoServiceProcessor {

	self4 := &MovieInfoServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["WriteMovieInfo"] = &movieInfoServiceProcessorWriteMovieInfo{handler:handler}
	return self4
}

func (p *MovieInfoServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil { return false, thrift.WrapTException(err2) }
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x5.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x5
}

type movieInfoServiceProcessorWriteMovieInfo struct {
	handler MovieInfoService
}

func (p *movieInfoServiceProcessorWriteMovieInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err6 error
	args := MovieInfoServiceWriteMovieInfoArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "WriteMovieInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := MovieInfoServiceWriteMovieInfoResult{}
	if retval, err2 := p.handler.WriteMovieInfo(ctx, args.Req); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc7 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteMovieInfo: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "WriteMovieInfo", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err6 = thrift.WrapTException(err2)
		}
		if err2 := _exc7.Write(ctx, oprot); _write_err6 == nil && err2 != nil {
			_write_err6 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err6 == nil && err2 != nil {
			_write_err6 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err6 == nil && err2 != nil {
			_write_err6 = thrift.WrapTException(err2)
		}
		if _write_err6 != nil {
			return false, thrift.WrapTException(_write_err6)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "WriteMovieInfo", thrift.REPLY, seqId); err2 != nil {
		_write_err6 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err6 == nil && err2 != nil {
		_write_err6 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err6 == nil && err2 != nil {
		_write_err6 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err6 == nil && err2 != nil {
		_write_err6 = thrift.WrapTException(err2)
	}
	if _write_err6 != nil {
		return false, thrift.WrapTException(_write_err6)
	}
	return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
// 
type MovieInfoServiceWriteMovieInfoArgs struct {
	Req *MovieInfoService_WriteMovieInfo_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewMovieInfoServiceWriteMovieInfoArgs() *MovieInfoServiceWriteMovieInfoArgs {
	return &MovieInfoServiceWriteMovieInfoArgs{}
}

var MovieInfoServiceWriteMovieInfoArgs_Req_DEFAULT *MovieInfoService_WriteMovieInfo_Request

func (p *MovieInfoServiceWriteMovieInfoArgs) GetReq() *MovieInfoService_WriteMovieInfo_Request {
	if !p.IsSetReq() {
		return MovieInfoServiceWriteMovieInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MovieInfoServiceWriteMovieInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &MovieInfoService_WriteMovieInfo_Request{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WriteMovieInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MovieInfoServiceWriteMovieInfoArgs(%+v)", *p)
}

func (p *MovieInfoServiceWriteMovieInfoArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*movieinfoservice.MovieInfoServiceWriteMovieInfoArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*MovieInfoServiceWriteMovieInfoArgs)(nil)

// Attributes:
//  - Success
// 
type MovieInfoServiceWriteMovieInfoResult struct {
	Success *MovieInfoService_WriteMovieInfo_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMovieInfoServiceWriteMovieInfoResult() *MovieInfoServiceWriteMovieInfoResult {
	return &MovieInfoServiceWriteMovieInfoResult{}
}

var MovieInfoServiceWriteMovieInfoResult_Success_DEFAULT *MovieInfoService_WriteMovieInfo_Response

func (p *MovieInfoServiceWriteMovieInfoResult) GetSuccess() *MovieInfoService_WriteMovieInfo_Response {
	if !p.IsSetSuccess() {
		return MovieInfoServiceWriteMovieInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MovieInfoServiceWriteMovieInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MovieInfoServiceWriteMovieInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MovieInfoServiceWriteMovieInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &MovieInfoService_WriteMovieInfo_Response{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MovieInfoServiceWriteMovieInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WriteMovieInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MovieInfoServiceWriteMovieInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MovieInfoServiceWriteMovieInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MovieInfoServiceWriteMovieInfoResult(%+v)", *p)
}

func (p *MovieInfoServiceWriteMovieInfoResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*movieinfoservice.MovieInfoServiceWriteMovieInfoResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*MovieInfoServiceWriteMovieInfoResult)(nil)


