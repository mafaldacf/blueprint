// Blueprint: Auto-generated by HTTP Plugin
package http

import (
	"context"
	"encoding/json"
	"net/http"
	"github.com/gorilla/mux"
	"log"
	"github.com/blueprint-uservices/blueprint/examples/dsb_media/workflow/mediamicroservices"
)

type APIService_HTTPServerHandler struct {
	Service mediamicroservices.APIService
	Address string
}

func New_APIService_HTTPServerHandler(ctx context.Context, service mediamicroservices.APIService, serverAddress string) (*APIService_HTTPServerHandler, error) {
	handler := &APIService_HTTPServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *APIService_HTTPServerHandler) Run(ctx context.Context) error {
	router := mux.NewRouter()
	// Add paths for the mux router
	
	router.Path("/RegisterMovie").HandlerFunc(handler.RegisterMovie)
	
	srv := &http.Server {
		Addr: handler.Address,
		Handler: router,
	}

	go func() {
		select {
		case <-ctx.Done():
			srv.Shutdown(ctx)
		}
	}()

	return srv.ListenAndServe()
}


func (handler *APIService_HTTPServerHandler) RegisterMovie(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	request_reqID := r.URL.Query().Get("reqID")
	var reqID int64
	if request_reqID != "" {
		err = json.Unmarshal([]byte(request_reqID), &reqID)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	movieID := r.URL.Query().Get("movieID")
	
	title := r.URL.Query().Get("title")
	
	casts := r.URL.Query().Get("casts")
	
	ctx := context.Background()
	ret0, ret1, err := handler.Service.RegisterMovie(ctx, reqID, movieID, title, casts)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 mediamicroservices.MovieId
		
		Ret1 mediamicroservices.MovieInfo
		
	}{}
	
	response.Ret0 = ret0
	
	response.Ret1 = ret1
	
	json.NewEncoder(w).Encode(response)
}

