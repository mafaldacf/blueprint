package github.com/blueprint-uservices/blueprint/examples/digota/workflow/digota:
  type  Card                       struct{Number string; ExpireMonth string; ExpireYear string; FirstName string; LastName string; CVC string; Type int32}
  type  Charge                     struct{Id string; Statement string; ChargeAmount uint64; RefundAmount uint64; Refunds []*Refund; Currency int32; Email string; Paid bool; Refunded bool; ProviderId int32; ProviderChargeId string; Created int64; Updated int64}
  type  ChargeList                 struct{Charges []*Charge; Total int32}
  func  CurrencyIsReserved         func(currency int32) bool
  var   Currency_name              map[int32]string
  var   Currency_value             map[string]int32
  type  Inventory                  struct{Quantity int64; Type int32}
  var   Inventory_Type_name        map[int32]string
  var   Inventory_Type_value       map[string]int32
  type  ListRequest                struct{Page int64; Limit int64; Sort int32}
  func  NewOrderServiceImpl        func(ctx context.Context, skuService SkuService, db github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLDatabase) (OrderService, error)
  func  NewPaymentServiceImpl      func(ctx context.Context, db github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLDatabase) (PaymentService, error)
  func  NewProductServiceImpl      func(ctx context.Context, skuService SkuService, db github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLDatabase) (ProductService, error)
  func  NewSkuServiceImpl          func(ctx context.Context, db github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLDatabase) (SkuService, error)
  type  Order                      struct{Id string "json:\"id,omitempty\" bson:\"_id\""; Amount int64 "json:\"amount,omitempty\""; Currency int32 "json:\"currency,omitempty\""; Items []*OrderItem "json:\"items,omitempty\""; Metadata map[string]string "json:\"metadata,omitempty\""; Email string "json:\"email,omitempty\""; ChargeId string "json:\"chargeId,omitempty\""; Status int32 "json:\"Status,omitempty\""; Shipping *Shipping "json:\"shipping,omitempty\""; Shipping2 Shipping "json:\"shipping2,omitempty\""; Created int64 "json:\"created,omitempty\""; Updated int64 "json:\"updated,omitempty\""}
  type  OrderItem                  struct{Type int32 "json:\"type,omitempty\" validate:\"required,gte=1,lte=4\""; Quantity int64 "json:\"quantity,omitempty\" validate:\"omitempty,gte=0\""; Amount int64 "json:\"amount,omitempty\""; Currency int32 "json:\"currency,omitempty\" validate:\"omitempty,gte=1,lte=128\""; Parent string "json:\"parent,omitempty\" validate:\"omitempty,uuid4\""; Description string "json:\"description,omitempty\""; Test *Test "json:\"test ,omitempty\""}
    method (*OrderItem) GetType() int32
    method (*OrderItem) IsTypeDiscount() bool
    method (*OrderItem) IsTypeReserved() bool
    method (*OrderItem) IsTypeShipping() bool
    method (*OrderItem) IsTypeSku() bool
    method (*OrderItem) IsTypeTax() bool
  var   OrderItem_Type_name        map[int32]string
  var   OrderItem_Type_value       map[string]int32
  type  OrderList                  struct{Orders []*Order "json:\"orders,omitempty\""; Total int32 "json:\"total,omitempty\""}
  type  OrderService               interface{New(ctx context.Context, currency int32, items []*OrderItem, metadata map[string]string, email string, shipping *Shipping) (*Order, error)}
    method (OrderService) New(ctx context.Context, currency int32, items []*OrderItem, metadata map[string]string, email string, shipping *Shipping) (*Order, error)
  type  OrderServiceImpl           struct{skuService SkuService; db github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLDatabase}
    method (*OrderServiceImpl) New(ctx context.Context, currency int32, items []*OrderItem, metadata map[string]string, email string, shipping *Shipping) (*Order, error)
    method (*OrderServiceImpl) New2(ctx context.Context, items []*OrderItem, shipping1 *Shipping, shipping2 Shipping) (*Order, error)
    method (*OrderServiceImpl) getUpdatedOrderItems(ctx context.Context, items []*OrderItem) ([]*OrderItem, error)
  type  PackageDimensions          struct{Height float64; Length float64; Weight float64; Width float64}
  type  PaymentService             interface{Get(ctx context.Context, id string) (*Charge, error); List(ctx context.Context, page int64, limit int64, sort int32) (*ChargeList, error); NewCharge(ctx context.Context, currency int32, total uint64, card *Card, email string, statement string, paymentProviderId int32, metadata map[string]string) (*Charge, error); RefundCharge(ctx context.Context, id string, amount uint64, reason int32) (*Charge, error)}
    method (PaymentService) Get(ctx context.Context, id string) (*Charge, error)
    method (PaymentService) List(ctx context.Context, page int64, limit int64, sort int32) (*ChargeList, error)
    method (PaymentService) NewCharge(ctx context.Context, currency int32, total uint64, card *Card, email string, statement string, paymentProviderId int32, metadata map[string]string) (*Charge, error)
    method (PaymentService) RefundCharge(ctx context.Context, id string, amount uint64, reason int32) (*Charge, error)
  type  PaymentServiceImpl         struct{db github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLDatabase}
    method (*PaymentServiceImpl) Get(ctx context.Context, id string) (*Charge, error)
    method (*PaymentServiceImpl) List(ctx context.Context, page int64, limit int64, sort int32) (*ChargeList, error)
    method (*PaymentServiceImpl) NewCharge(ctx context.Context, currency int32, total uint64, card *Card, email string, statement string, paymentProviderId int32, metadata map[string]string) (*Charge, error)
    method (*PaymentServiceImpl) RefundCharge(ctx context.Context, id string, amount uint64, reason int32) (*Charge, error)
  type  Product                    struct{Id string "json:\"id,omitempty\" bson:\"_id\""; Name string "json:\"name,omitempty\""; Active bool "json:\"active,omitempty\""; Attributes []string "json:\"attributes,omitempty\""; Description string "json:\"description,omitempty\""; Images []string "json:\"images,omitempty\""; Metadata map[string]string "json:\"metadata,omitempty\""; Shippable bool "json:\"shippable,omitempty\""; Url string "json:\"url,omitempty\""; Skus []*Sku "json:\"skus,omitempty\""; Created int64 "json:\"created,omitempty\""; Updated int64 "json:\"updated,omitempty\""}
  type  ProductList                struct{Products []*Product "json:\"products,omitempty\""; Total int32 "json:\"total,omitempty\""}
  type  ProductService             interface{Delete(ctx context.Context, id string) error; Get(ctx context.Context, id string) (*Product, error); List(ctx context.Context, page int64, limit int64, sort int32) (*ProductList, error); New(ctx context.Context, name string, active bool, attributes []string, description string, images []string, metadata map[string]string, shippable bool, url string) (*Product, error); Update(ctx context.Context, id string, name string, active bool, attributes []string, description string, images []string, metadata map[string]string, shippable bool, url string) (*Product, error)}
    method (ProductService) Delete(ctx context.Context, id string) error
    method (ProductService) Get(ctx context.Context, id string) (*Product, error)
    method (ProductService) List(ctx context.Context, page int64, limit int64, sort int32) (*ProductList, error)
    method (ProductService) New(ctx context.Context, name string, active bool, attributes []string, description string, images []string, metadata map[string]string, shippable bool, url string) (*Product, error)
    method (ProductService) Update(ctx context.Context, id string, name string, active bool, attributes []string, description string, images []string, metadata map[string]string, shippable bool, url string) (*Product, error)
  type  ProductServiceImpl         struct{skuService SkuService; db github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLDatabase}
    method (*ProductServiceImpl) Delete(ctx context.Context, id string) error
    method (*ProductServiceImpl) Get(ctx context.Context, id string) (*Product, error)
    method (*ProductServiceImpl) List(ctx context.Context, page int64, limit int64, sort int32) (*ProductList, error)
    method (*ProductServiceImpl) New(ctx context.Context, name string, active bool, attributes []string, description string, images []string, metadata map[string]string, shippable bool, url string) (*Product, error)
    method (*ProductServiceImpl) Update(ctx context.Context, id string, name string, active bool, attributes []string, description string, images []string, metadata map[string]string, shippable bool, url string) (*Product, error)
  type  Refund                     struct{RefundAmount uint64; ProviderRefundId string; Reason int32; Created int64}
  type  Shipping                   struct{Name string "json:\"name,omitempty\""; Phone string "json:\"phone,omitempty\""; Address *Shipping_Address "json:\"address,omitempty\""; Carrier string "json:\"carrier,omitempty\""; TrackingNumber string "json:\"trackingNumber,omitempty\""}
  type  Shipping_Address           struct{Line1 string "json:\"line1,omitempty\""; City string "json:\"city,omitempty\""; Country string "json:\"country,omitempty\""; Line2 string "json:\"line2,omitempty\""; PostalCode string "json:\"postalCode,omitempty\""; State string "json:\"state,omitempty\""}
  type  Sku                        struct{Id string; Name string; Price uint64; Currency int32; Active bool; Parent string; Metadata map[string]string; Attributes map[string]string; Image string; PackageDimensions *PackageDimensions; Inventory *Inventory; Created int64; Updated int64}
  type  SkuList                    struct{Orders []*Sku "json:\"orders,omitempty\""; Total int32 "json:\"total,omitempty\""}
  type  SkuService                 interface{Get(ctx context.Context, id string) (*Sku, error); New(ctx context.Context, name string, currency int32, active bool, price uint64, parent string, metadata map[string]string, image string, packageDimensions *PackageDimensions, inventory *Inventory, attributes map[string]string) (*Sku, error)}
    method (SkuService) Get(ctx context.Context, id string) (*Sku, error)
    method (SkuService) New(ctx context.Context, name string, currency int32, active bool, price uint64, parent string, metadata map[string]string, image string, packageDimensions *PackageDimensions, inventory *Inventory, attributes map[string]string) (*Sku, error)
  type  SkuServiceImpl             struct{db github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLDatabase}
    method (*SkuServiceImpl) Get(ctx context.Context, id string) (*Sku, error)
    method (*SkuServiceImpl) New(ctx context.Context, name string, currency int32, active bool, price uint64, parent string, metadata map[string]string, image string, packageDimensions *PackageDimensions, inventory *Inventory, attributes map[string]string) (*Sku, error)
  type  Test                       struct{Value int}
  func  calculateTotal             func(currency int32, orderItems []*OrderItem) (int64, error)
  const defaultDiscountDescription defaultDiscountDescription = "Discount":untyped string
  const defaultShippingDescription defaultShippingDescription = "Shipping":untyped string
  const defaultTaxDescription      defaultTaxDescription = "Tax":untyped string
  func  init                       func()
  var   init$guard                 bool
  const ns                         ns = "order":untyped string
  const orderTTL                   orderTTL = 120000000000:time.Duration

