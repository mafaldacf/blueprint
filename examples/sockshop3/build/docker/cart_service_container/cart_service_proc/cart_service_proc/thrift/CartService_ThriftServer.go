// Blueprint: Auto-generated by Thrift Plugin

package thrift

import (
	"blueprint/goproc/cart_service_proc/thrift/cartservice"
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
	"context"
	"github.com/apache/thrift/lib/go/thrift"
)

type CartService_ThriftServerHandler struct {
	Service sockshop3.CartService
	Address string
}

func New_CartService_ThriftServerHandler(ctx context.Context, service sockshop3.CartService, serverAddress string) (*CartService_ThriftServerHandler, error) {
	handler := &CartService_ThriftServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is automatically called in a separate goroutine by runtime/plugins/golang/di.go
func (handler *CartService_ThriftServerHandler) Run(ctx context.Context) error {
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactory(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TServerTransport
	var err error
	transport, err = thrift.NewTServerSocket(handler.Address)
	if err != nil {
		return err
	}
	processor := cartservice.NewCartServiceProcessor(handler)
	server := thrift.NewTSimpleServer4(processor, transport, transportFactory, protocolFactory)

	go func() {
		select {
		case <-ctx.Done():
			server.Stop()
		}
	}()

	return server.Serve()
}


func (handler *CartService_ThriftServerHandler) AddItem(ctx context.Context, req *cartservice.CartService_AddItem_Request) (*cartservice.CartService_AddItem_Response, error) {
	customerID, item := unmarshall_AddItem_req(req)
	ret0, err := handler.Service.AddItem(ctx, customerID, item)
	if err != nil {
		return nil, err
	}
	rsp := &cartservice.CartService_AddItem_Response{}
	marshall_AddItem_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *CartService_ThriftServerHandler) DeleteCart(ctx context.Context, req *cartservice.CartService_DeleteCart_Request) (*cartservice.CartService_DeleteCart_Response, error) {
	customerID := unmarshall_DeleteCart_req(req)
	err := handler.Service.DeleteCart(ctx, customerID)
	if err != nil {
		return nil, err
	}
	rsp := &cartservice.CartService_DeleteCart_Response{}
	marshall_DeleteCart_rsp(rsp, )
	return rsp, nil
}

func (handler *CartService_ThriftServerHandler) GetCart(ctx context.Context, req *cartservice.CartService_GetCart_Request) (*cartservice.CartService_GetCart_Response, error) {
	customerID := unmarshall_GetCart_req(req)
	ret0, err := handler.Service.GetCart(ctx, customerID)
	if err != nil {
		return nil, err
	}
	rsp := &cartservice.CartService_GetCart_Response{}
	marshall_GetCart_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *CartService_ThriftServerHandler) GetItem(ctx context.Context, req *cartservice.CartService_GetItem_Request) (*cartservice.CartService_GetItem_Response, error) {
	customerID, itemID := unmarshall_GetItem_req(req)
	ret0, err := handler.Service.GetItem(ctx, customerID, itemID)
	if err != nil {
		return nil, err
	}
	rsp := &cartservice.CartService_GetItem_Response{}
	marshall_GetItem_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *CartService_ThriftServerHandler) MergeCarts(ctx context.Context, req *cartservice.CartService_MergeCarts_Request) (*cartservice.CartService_MergeCarts_Response, error) {
	customerID, sessionID := unmarshall_MergeCarts_req(req)
	err := handler.Service.MergeCarts(ctx, customerID, sessionID)
	if err != nil {
		return nil, err
	}
	rsp := &cartservice.CartService_MergeCarts_Response{}
	marshall_MergeCarts_rsp(rsp, )
	return rsp, nil
}

func (handler *CartService_ThriftServerHandler) RemoveItem(ctx context.Context, req *cartservice.CartService_RemoveItem_Request) (*cartservice.CartService_RemoveItem_Response, error) {
	customerID, itemID := unmarshall_RemoveItem_req(req)
	err := handler.Service.RemoveItem(ctx, customerID, itemID)
	if err != nil {
		return nil, err
	}
	rsp := &cartservice.CartService_RemoveItem_Response{}
	marshall_RemoveItem_rsp(rsp, )
	return rsp, nil
}

func (handler *CartService_ThriftServerHandler) UpdateItem(ctx context.Context, req *cartservice.CartService_UpdateItem_Request) (*cartservice.CartService_UpdateItem_Response, error) {
	customerID, item := unmarshall_UpdateItem_req(req)
	err := handler.Service.UpdateItem(ctx, customerID, item)
	if err != nil {
		return nil, err
	}
	rsp := &cartservice.CartService_UpdateItem_Response{}
	marshall_UpdateItem_rsp(rsp, )
	return rsp, nil
}

