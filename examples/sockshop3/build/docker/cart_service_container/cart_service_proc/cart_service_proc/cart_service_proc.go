// Package main is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the cart_service_proc namespace.
//
// To instantiate the cart_service_proc namespace, first call [New_cart_service_proc] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package main

import (
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
	"blueprint/goproc/cart_service_proc/thrift"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/opentelemetry"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/slogger"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/mongodb"
)

// Initializes the cart_service_proc namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func New_cart_service_proc(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_cart_service_proc_Args(b)
	set_cart_service_proc_Instances(b)
	set_cart_service_proc_Definitions(b)
	return b
}

// cart_service_proc requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//   cart_db.dial_addr
//   cart_service.thrift.bind_addr
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
func set_cart_service_proc_Args(b *golang.NamespaceBuilder) {
	b.Required("cart_db.dial_addr", "Argument generated by Blueprint IR: cart_db.dial_addr = AddressConfig()")
	b.Required("cart_service.thrift.bind_addr", "Argument generated by Blueprint IR: cart_service.thrift.bind_addr = AddressConfig()")
}

// When the cart_service_proc namespace is built it will automatically instantiate
// the following nodes:
//   cart_service_proc.stdoutmetriccollector
//   cart_service_proc.logger
//   cart_db.client
//   cart_service
//   cart_service.thrift_server
func set_cart_service_proc_Instances(b *golang.NamespaceBuilder) {
	b.Instantiate("cart_service_proc.stdoutmetriccollector")
	b.Instantiate("cart_service_proc.logger")
	b.Instantiate("cart_db.client")
	b.Instantiate("cart_service")
	b.Instantiate("cart_service.thrift_server")
}

// The cart_service_proc namespace contains definitions for instantiating
// the following nodes:
//   cart_db.client
//   cart_service
//   cart_service.thrift_server
//   cart_service_proc.logger
//   cart_service_proc.stdoutmetriccollector
func set_cart_service_proc_Definitions(b *golang.NamespaceBuilder) {
	b.Define("cart_db.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("cart_db.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return mongodb.NewMongoDB(n.Context(), addr)
	})
	
	b.Define("cart_service", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var db backend.NoSQLDatabase
		if err := n.Get("cart_db.client", &db); err != nil {
			return nil, err
		}
		
		return sockshop3.NewCartService(n.Context(), db)
	})
	
	b.Define("cart_service.thrift_server", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service sockshop3.CartService
		if err := n.Get("cart_service", &service); err != nil {
			return nil, err
		}
		
		var serverAddr string
		if err := n.Get("cart_service.thrift.bind_addr", &serverAddr); err != nil {
			return nil, err
		}
		
		return thrift.New_CartService_ThriftServerHandler(n.Context(), service, serverAddr)
	})
	
	b.Define("cart_service_proc.logger", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return slogger.NewSLogger(n.Context())
	})
	
	b.Define("cart_service_proc.stdoutmetriccollector", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return opentelemetry.NewStdoutMetricCollector(n.Context())
	})
	
}
