// Blueprint: Auto-generated by Thrift Plugin
package thrift

import (
	"blueprint/goproc/frontend_service_proc/thrift/catalogueservice"
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
	"context"
	"time"
	"errors"
	"github.com/apache/thrift/lib/go/thrift"
)

type CatalogueService_ThriftClient struct {
	sockshop3.CatalogueService
	Client *catalogueservice.CatalogueServiceClient // The actual thrift-generated client
	Timeout time.Duration
	Address string
}

func New_CatalogueService_ThriftClient(ctx context.Context, serverAddress string) (*CatalogueService_ThriftClient, error) {
	handler := &CatalogueService_ThriftClient{}
	handler.Address = serverAddress
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactory(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TTransport
	var err error
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	transport, err = thrift.NewTSocketTimeout(handler.Address, duration, duration)
	if err != nil {
		return nil, err
	}
	transport, err = transportFactory.GetTransport(transport)
	if err != nil {
		return nil, err
	}
	err = transport.Open()
	if err != nil {
		return nil, err
	}
	iprot := protocolFactory.GetProtocol(transport)
	oprot := protocolFactory.GetProtocol(transport)

	client := catalogueservice.NewCatalogueServiceClient(thrift.NewTStandardClient(iprot, oprot))
	handler.Client = client
	handler.Timeout = duration
	return handler, nil
}


func (client *CatalogueService_ThriftClient) AddSock(ctx context.Context, sock sockshop3.Sock) (ret0 string, err error) {
	// Create and marshall the thrift Request object
	req := &catalogueservice.CatalogueService_AddSock_Request{}
	marshall_AddSock_req(req, sock)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.AddSock(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_AddSock_rsp(rsp)
	return
}

func (client *CatalogueService_ThriftClient) AddTags(ctx context.Context, tags []string) (err error) {
	// Create and marshall the thrift Request object
	req := &catalogueservice.CatalogueService_AddTags_Request{}
	marshall_AddTags_req(req, tags)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.AddTags(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	 unmarshall_AddTags_rsp(rsp)
	return
}

func (client *CatalogueService_ThriftClient) Count(ctx context.Context, tags []string) (ret0 int, err error) {
	// Create and marshall the thrift Request object
	req := &catalogueservice.CatalogueService_Count_Request{}
	marshall_Count_req(req, tags)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.Count(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_Count_rsp(rsp)
	return
}

func (client *CatalogueService_ThriftClient) DeleteSock(ctx context.Context, id string) (err error) {
	// Create and marshall the thrift Request object
	req := &catalogueservice.CatalogueService_DeleteSock_Request{}
	marshall_DeleteSock_req(req, id)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.DeleteSock(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	 unmarshall_DeleteSock_rsp(rsp)
	return
}

func (client *CatalogueService_ThriftClient) Get(ctx context.Context, id string) (ret0 sockshop3.Sock, err error) {
	// Create and marshall the thrift Request object
	req := &catalogueservice.CatalogueService_Get_Request{}
	marshall_Get_req(req, id)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.Get(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_Get_rsp(rsp)
	return
}

func (client *CatalogueService_ThriftClient) List(ctx context.Context, tags []string, order string, pageNum int, pageSize int) (ret0 []sockshop3.Sock, err error) {
	// Create and marshall the thrift Request object
	req := &catalogueservice.CatalogueService_List_Request{}
	marshall_List_req(req, tags, order, pageNum, pageSize)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.List(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_List_rsp(rsp)
	return
}

func (client *CatalogueService_ThriftClient) Tags(ctx context.Context) (ret0 []string, err error) {
	// Create and marshall the thrift Request object
	req := &catalogueservice.CatalogueService_Tags_Request{}
	marshall_Tags_req(req, )

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.Tags(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_Tags_rsp(rsp)
	return
}

