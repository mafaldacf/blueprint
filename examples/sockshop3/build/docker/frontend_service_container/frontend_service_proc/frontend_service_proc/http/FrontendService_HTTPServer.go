// Blueprint: Auto-generated by HTTP Plugin
package http

import (
	"context"
	"encoding/json"
	"net/http"
	"github.com/gorilla/mux"
	"log"
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
)

type FrontendService_HTTPServerHandler struct {
	Service sockshop3.FrontendService
	Address string
}

func New_FrontendService_HTTPServerHandler(ctx context.Context, service sockshop3.FrontendService, serverAddress string) (*FrontendService_HTTPServerHandler, error) {
	handler := &FrontendService_HTTPServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *FrontendService_HTTPServerHandler) Run(ctx context.Context) error {
	router := mux.NewRouter()
	// Add paths for the mux router
	
	router.Path("/AddItem").HandlerFunc(handler.AddItem)
	
	router.Path("/DeleteCart").HandlerFunc(handler.DeleteCart)
	
	router.Path("/DeleteSock").HandlerFunc(handler.DeleteSock)
	
	router.Path("/GetAddress").HandlerFunc(handler.GetAddress)
	
	router.Path("/GetCard").HandlerFunc(handler.GetCard)
	
	router.Path("/GetOrder").HandlerFunc(handler.GetOrder)
	
	router.Path("/GetOrders").HandlerFunc(handler.GetOrders)
	
	router.Path("/GetSock").HandlerFunc(handler.GetSock)
	
	router.Path("/GetUser").HandlerFunc(handler.GetUser)
	
	router.Path("/ListItems").HandlerFunc(handler.ListItems)
	
	router.Path("/ListTags").HandlerFunc(handler.ListTags)
	
	router.Path("/LoadCatalogue").HandlerFunc(handler.LoadCatalogue)
	
	router.Path("/Login").HandlerFunc(handler.Login)
	
	router.Path("/NewOrder").HandlerFunc(handler.NewOrder)
	
	router.Path("/PostAddress").HandlerFunc(handler.PostAddress)
	
	router.Path("/PostCard").HandlerFunc(handler.PostCard)
	
	router.Path("/Register").HandlerFunc(handler.Register)
	
	router.Path("/RemoveItem").HandlerFunc(handler.RemoveItem)
	
	router.Path("/UpdateItem").HandlerFunc(handler.UpdateItem)
	
	srv := &http.Server {
		Addr: handler.Address,
		Handler: router,
	}

	go func() {
		select {
		case <-ctx.Done():
			srv.Shutdown(ctx)
		}
	}()

	return srv.ListenAndServe()
}


func (handler *FrontendService_HTTPServerHandler) AddItem(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	sessionID := r.URL.Query().Get("sessionID")
	
	itemID := r.URL.Query().Get("itemID")
	
	ctx := context.Background()
	ret0, err := handler.Service.AddItem(ctx, sessionID, itemID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) DeleteCart(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	sessionID := r.URL.Query().Get("sessionID")
	
	ctx := context.Background()
	err = handler.Service.DeleteCart(ctx, sessionID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
	}{}
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) DeleteSock(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	id := r.URL.Query().Get("id")
	
	ctx := context.Background()
	err = handler.Service.DeleteSock(ctx, id)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
	}{}
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) GetAddress(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	addressID := r.URL.Query().Get("addressID")
	
	ctx := context.Background()
	ret0, err := handler.Service.GetAddress(ctx, addressID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 sockshop3.Address
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) GetCard(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	cardID := r.URL.Query().Get("cardID")
	
	ctx := context.Background()
	ret0, err := handler.Service.GetCard(ctx, cardID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 sockshop3.Card
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) GetOrder(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	orderID := r.URL.Query().Get("orderID")
	
	ctx := context.Background()
	ret0, err := handler.Service.GetOrder(ctx, orderID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 sockshop3.Order
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) GetOrders(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	userID := r.URL.Query().Get("userID")
	
	ctx := context.Background()
	ret0, err := handler.Service.GetOrders(ctx, userID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 []sockshop3.Order
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) GetSock(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	itemID := r.URL.Query().Get("itemID")
	
	ctx := context.Background()
	ret0, err := handler.Service.GetSock(ctx, itemID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 sockshop3.Sock
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	userID := r.URL.Query().Get("userID")
	
	ctx := context.Background()
	ret0, err := handler.Service.GetUser(ctx, userID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 sockshop3.User
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) ListItems(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	request_tags := r.URL.Query().Get("tags")
	var tags []string
	if request_tags != "" {
		err = json.Unmarshal([]byte(request_tags), &tags)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	order := r.URL.Query().Get("order")
	
	request_pageNum := r.URL.Query().Get("pageNum")
	var pageNum int
	if request_pageNum != "" {
		err = json.Unmarshal([]byte(request_pageNum), &pageNum)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	request_pageSize := r.URL.Query().Get("pageSize")
	var pageSize int
	if request_pageSize != "" {
		err = json.Unmarshal([]byte(request_pageSize), &pageSize)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	ctx := context.Background()
	ret0, err := handler.Service.ListItems(ctx, tags, order, pageNum, pageSize)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 []sockshop3.Sock
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) ListTags(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	ctx := context.Background()
	ret0, err := handler.Service.ListTags(ctx)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 []string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) LoadCatalogue(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	ctx := context.Background()
	ret0, err := handler.Service.LoadCatalogue(ctx)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) Login(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	sessionID := r.URL.Query().Get("sessionID")
	
	username := r.URL.Query().Get("username")
	
	password := r.URL.Query().Get("password")
	
	ctx := context.Background()
	ret0, ret1, err := handler.Service.Login(ctx, sessionID, username, password)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
		Ret1 sockshop3.User
		
	}{}
	
	response.Ret0 = ret0
	
	response.Ret1 = ret1
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) NewOrder(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	userID := r.URL.Query().Get("userID")
	
	addressID := r.URL.Query().Get("addressID")
	
	cardID := r.URL.Query().Get("cardID")
	
	cartID := r.URL.Query().Get("cartID")
	
	ctx := context.Background()
	ret0, err := handler.Service.NewOrder(ctx, userID, addressID, cardID, cartID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 sockshop3.Order
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) PostAddress(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	userID := r.URL.Query().Get("userID")
	
	request_address := r.URL.Query().Get("address")
	var address sockshop3.Address
	if request_address != "" {
		err = json.Unmarshal([]byte(request_address), &address)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	ctx := context.Background()
	ret0, err := handler.Service.PostAddress(ctx, userID, address)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) PostCard(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	userID := r.URL.Query().Get("userID")
	
	request_card := r.URL.Query().Get("card")
	var card sockshop3.Card
	if request_card != "" {
		err = json.Unmarshal([]byte(request_card), &card)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	ctx := context.Background()
	ret0, err := handler.Service.PostCard(ctx, userID, card)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) Register(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	sessionID := r.URL.Query().Get("sessionID")
	
	username := r.URL.Query().Get("username")
	
	password := r.URL.Query().Get("password")
	
	email := r.URL.Query().Get("email")
	
	first := r.URL.Query().Get("first")
	
	last := r.URL.Query().Get("last")
	
	ctx := context.Background()
	ret0, err := handler.Service.Register(ctx, sessionID, username, password, email, first, last)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) RemoveItem(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	sessionID := r.URL.Query().Get("sessionID")
	
	itemID := r.URL.Query().Get("itemID")
	
	ctx := context.Background()
	err = handler.Service.RemoveItem(ctx, sessionID, itemID)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
	}{}
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) UpdateItem(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	sessionID := r.URL.Query().Get("sessionID")
	
	itemID := r.URL.Query().Get("itemID")
	
	request_quantity := r.URL.Query().Get("quantity")
	var quantity int
	if request_quantity != "" {
		err = json.Unmarshal([]byte(request_quantity), &quantity)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	ctx := context.Background()
	ret0, err := handler.Service.UpdateItem(ctx, sessionID, itemID, quantity)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

