// Package main is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the frontend_service_proc namespace.
//
// To instantiate the frontend_service_proc namespace, first call [New_frontend_service_proc] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package main

import (
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/opentelemetry"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/slogger"
	"blueprint/goproc/frontend_service_proc/thrift"
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
	"blueprint/goproc/frontend_service_proc/http"
)

// Initializes the frontend_service_proc namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func New_frontend_service_proc(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_frontend_service_proc_Args(b)
	set_frontend_service_proc_Instances(b)
	set_frontend_service_proc_Definitions(b)
	return b
}

// frontend_service_proc requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//   cart_service.thrift.dial_addr
//   catalogue_service.thrift.dial_addr
//   frontend.http.bind_addr
//   order_service.thrift.dial_addr
//   user_service.thrift.dial_addr
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
func set_frontend_service_proc_Args(b *golang.NamespaceBuilder) {
	b.Required("cart_service.thrift.dial_addr", "Argument generated by Blueprint IR: cart_service.thrift.dial_addr = AddressConfig()")
	b.Required("catalogue_service.thrift.dial_addr", "Argument generated by Blueprint IR: catalogue_service.thrift.dial_addr = AddressConfig()")
	b.Required("frontend.http.bind_addr", "Argument generated by Blueprint IR: frontend.http.bind_addr = AddressConfig()")
	b.Required("order_service.thrift.dial_addr", "Argument generated by Blueprint IR: order_service.thrift.dial_addr = AddressConfig()")
	b.Required("user_service.thrift.dial_addr", "Argument generated by Blueprint IR: user_service.thrift.dial_addr = AddressConfig()")
}

// When the frontend_service_proc namespace is built it will automatically instantiate
// the following nodes:
//   frontend_service_proc.stdoutmetriccollector
//   frontend_service_proc.logger
//   user_service.thrift_client
//   user_service.client
//   catalogue_service.thrift_client
//   catalogue_service.client
//   cart_service.thrift_client
//   cart_service.client
//   order_service.thrift_client
//   order_service.client
//   frontend
//   frontend.http_server
func set_frontend_service_proc_Instances(b *golang.NamespaceBuilder) {
	b.Instantiate("frontend_service_proc.stdoutmetriccollector")
	b.Instantiate("frontend_service_proc.logger")
	b.Instantiate("user_service.thrift_client")
	b.Instantiate("user_service.client")
	b.Instantiate("catalogue_service.thrift_client")
	b.Instantiate("catalogue_service.client")
	b.Instantiate("cart_service.thrift_client")
	b.Instantiate("cart_service.client")
	b.Instantiate("order_service.thrift_client")
	b.Instantiate("order_service.client")
	b.Instantiate("frontend")
	b.Instantiate("frontend.http_server")
}

// The frontend_service_proc namespace contains definitions for instantiating
// the following nodes:
//   cart_service.client
//   cart_service.thrift_client
//   catalogue_service.client
//   catalogue_service.thrift_client
//   frontend
//   frontend.http_server
//   frontend_service_proc.logger
//   frontend_service_proc.stdoutmetriccollector
//   order_service.client
//   order_service.thrift_client
//   user_service.client
//   user_service.thrift_client
func set_frontend_service_proc_Definitions(b *golang.NamespaceBuilder) {
	b.Define("cart_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client sockshop3.CartService
		err := n.Get("cart_service.thrift_client", &client)
		return client, err
	})
	
	b.Define("cart_service.thrift_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("cart_service.thrift.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return thrift.New_CartService_ThriftClient(n.Context(), addr)
	})
	
	b.Define("catalogue_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client sockshop3.CatalogueService
		err := n.Get("catalogue_service.thrift_client", &client)
		return client, err
	})
	
	b.Define("catalogue_service.thrift_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("catalogue_service.thrift.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return thrift.New_CatalogueService_ThriftClient(n.Context(), addr)
	})
	
	b.Define("frontend", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var user sockshop3.UserService
		if err := n.Get("user_service.client", &user); err != nil {
			return nil, err
		}
		
		var catalogue sockshop3.CatalogueService
		if err := n.Get("catalogue_service.client", &catalogue); err != nil {
			return nil, err
		}
		
		var cart sockshop3.CartService
		if err := n.Get("cart_service.client", &cart); err != nil {
			return nil, err
		}
		
		var order sockshop3.OrderService
		if err := n.Get("order_service.client", &order); err != nil {
			return nil, err
		}
		
		return sockshop3.NewFrontend(n.Context(), user, catalogue, cart, order)
	})
	
	b.Define("frontend.http_server", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service sockshop3.FrontendService
		if err := n.Get("frontend", &service); err != nil {
			return nil, err
		}
		
		var serverAddr string
		if err := n.Get("frontend.http.bind_addr", &serverAddr); err != nil {
			return nil, err
		}
		
		return http.New_FrontendService_HTTPServerHandler(n.Context(), service, serverAddr)
	})
	
	b.Define("frontend_service_proc.logger", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return slogger.NewSLogger(n.Context())
	})
	
	b.Define("frontend_service_proc.stdoutmetriccollector", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return opentelemetry.NewStdoutMetricCollector(n.Context())
	})
	
	b.Define("order_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client sockshop3.OrderService
		err := n.Get("order_service.thrift_client", &client)
		return client, err
	})
	
	b.Define("order_service.thrift_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("order_service.thrift.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return thrift.New_OrderService_ThriftClient(n.Context(), addr)
	})
	
	b.Define("user_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client sockshop3.UserService
		err := n.Get("user_service.thrift_client", &client)
		return client, err
	})
	
	b.Define("user_service.thrift_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("user_service.thrift.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return thrift.New_UserService_ThriftClient(n.Context(), addr)
	})
	
}
