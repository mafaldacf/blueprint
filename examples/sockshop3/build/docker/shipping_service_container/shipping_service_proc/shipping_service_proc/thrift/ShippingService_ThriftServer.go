// Blueprint: Auto-generated by Thrift Plugin

package thrift

import (
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
	"context"
	"github.com/apache/thrift/lib/go/thrift"
	"blueprint/goproc/shipping_service_proc/thrift/shippingservice"
)

type ShippingService_ThriftServerHandler struct {
	Service sockshop3.ShippingService
	Address string
}

func New_ShippingService_ThriftServerHandler(ctx context.Context, service sockshop3.ShippingService, serverAddress string) (*ShippingService_ThriftServerHandler, error) {
	handler := &ShippingService_ThriftServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is automatically called in a separate goroutine by runtime/plugins/golang/di.go
func (handler *ShippingService_ThriftServerHandler) Run(ctx context.Context) error {
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactory(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TServerTransport
	var err error
	transport, err = thrift.NewTServerSocket(handler.Address)
	if err != nil {
		return err
	}
	processor := shippingservice.NewShippingServiceProcessor(handler)
	server := thrift.NewTSimpleServer4(processor, transport, transportFactory, protocolFactory)

	go func() {
		select {
		case <-ctx.Done():
			server.Stop()
		}
	}()

	return server.Serve()
}


func (handler *ShippingService_ThriftServerHandler) GetShipment(ctx context.Context, req *shippingservice.ShippingService_GetShipment_Request) (*shippingservice.ShippingService_GetShipment_Response, error) {
	id := unmarshall_GetShipment_req(req)
	ret0, err := handler.Service.GetShipment(ctx, id)
	if err != nil {
		return nil, err
	}
	rsp := &shippingservice.ShippingService_GetShipment_Response{}
	marshall_GetShipment_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *ShippingService_ThriftServerHandler) PostShipping(ctx context.Context, req *shippingservice.ShippingService_PostShipping_Request) (*shippingservice.ShippingService_PostShipping_Response, error) {
	shipment := unmarshall_PostShipping_req(req)
	ret0, err := handler.Service.PostShipping(ctx, shipment)
	if err != nil {
		return nil, err
	}
	rsp := &shippingservice.ShippingService_PostShipping_Response{}
	marshall_PostShipping_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *ShippingService_ThriftServerHandler) UpdateStatus(ctx context.Context, req *shippingservice.ShippingService_UpdateStatus_Request) (*shippingservice.ShippingService_UpdateStatus_Response, error) {
	id, status := unmarshall_UpdateStatus_req(req)
	err := handler.Service.UpdateStatus(ctx, id, status)
	if err != nil {
		return nil, err
	}
	rsp := &shippingservice.ShippingService_UpdateStatus_Response{}
	marshall_UpdateStatus_rsp(rsp, )
	return rsp, nil
}

