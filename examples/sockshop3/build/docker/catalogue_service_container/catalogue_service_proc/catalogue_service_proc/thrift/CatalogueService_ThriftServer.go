// Blueprint: Auto-generated by Thrift Plugin

package thrift

import (
	"context"
	"github.com/apache/thrift/lib/go/thrift"
	"blueprint/goproc/catalogue_service_proc/thrift/catalogueservice"
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
)

type CatalogueService_ThriftServerHandler struct {
	Service sockshop3.CatalogueService
	Address string
}

func New_CatalogueService_ThriftServerHandler(ctx context.Context, service sockshop3.CatalogueService, serverAddress string) (*CatalogueService_ThriftServerHandler, error) {
	handler := &CatalogueService_ThriftServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is automatically called in a separate goroutine by runtime/plugins/golang/di.go
func (handler *CatalogueService_ThriftServerHandler) Run(ctx context.Context) error {
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactory(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TServerTransport
	var err error
	transport, err = thrift.NewTServerSocket(handler.Address)
	if err != nil {
		return err
	}
	processor := catalogueservice.NewCatalogueServiceProcessor(handler)
	server := thrift.NewTSimpleServer4(processor, transport, transportFactory, protocolFactory)

	go func() {
		select {
		case <-ctx.Done():
			server.Stop()
		}
	}()

	return server.Serve()
}


func (handler *CatalogueService_ThriftServerHandler) AddSock(ctx context.Context, req *catalogueservice.CatalogueService_AddSock_Request) (*catalogueservice.CatalogueService_AddSock_Response, error) {
	sock := unmarshall_AddSock_req(req)
	ret0, err := handler.Service.AddSock(ctx, sock)
	if err != nil {
		return nil, err
	}
	rsp := &catalogueservice.CatalogueService_AddSock_Response{}
	marshall_AddSock_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *CatalogueService_ThriftServerHandler) AddTags(ctx context.Context, req *catalogueservice.CatalogueService_AddTags_Request) (*catalogueservice.CatalogueService_AddTags_Response, error) {
	tags := unmarshall_AddTags_req(req)
	err := handler.Service.AddTags(ctx, tags)
	if err != nil {
		return nil, err
	}
	rsp := &catalogueservice.CatalogueService_AddTags_Response{}
	marshall_AddTags_rsp(rsp, )
	return rsp, nil
}

func (handler *CatalogueService_ThriftServerHandler) Count(ctx context.Context, req *catalogueservice.CatalogueService_Count_Request) (*catalogueservice.CatalogueService_Count_Response, error) {
	tags := unmarshall_Count_req(req)
	ret0, err := handler.Service.Count(ctx, tags)
	if err != nil {
		return nil, err
	}
	rsp := &catalogueservice.CatalogueService_Count_Response{}
	marshall_Count_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *CatalogueService_ThriftServerHandler) DeleteSock(ctx context.Context, req *catalogueservice.CatalogueService_DeleteSock_Request) (*catalogueservice.CatalogueService_DeleteSock_Response, error) {
	id := unmarshall_DeleteSock_req(req)
	err := handler.Service.DeleteSock(ctx, id)
	if err != nil {
		return nil, err
	}
	rsp := &catalogueservice.CatalogueService_DeleteSock_Response{}
	marshall_DeleteSock_rsp(rsp, )
	return rsp, nil
}

func (handler *CatalogueService_ThriftServerHandler) Get(ctx context.Context, req *catalogueservice.CatalogueService_Get_Request) (*catalogueservice.CatalogueService_Get_Response, error) {
	id := unmarshall_Get_req(req)
	ret0, err := handler.Service.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	rsp := &catalogueservice.CatalogueService_Get_Response{}
	marshall_Get_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *CatalogueService_ThriftServerHandler) List(ctx context.Context, req *catalogueservice.CatalogueService_List_Request) (*catalogueservice.CatalogueService_List_Response, error) {
	tags, order, pageNum, pageSize := unmarshall_List_req(req)
	ret0, err := handler.Service.List(ctx, tags, order, pageNum, pageSize)
	if err != nil {
		return nil, err
	}
	rsp := &catalogueservice.CatalogueService_List_Response{}
	marshall_List_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *CatalogueService_ThriftServerHandler) Tags(ctx context.Context, req *catalogueservice.CatalogueService_Tags_Request) (*catalogueservice.CatalogueService_Tags_Response, error) {
	 unmarshall_Tags_req(req)
	ret0, err := handler.Service.Tags(ctx)
	if err != nil {
		return nil, err
	}
	rsp := &catalogueservice.CatalogueService_Tags_Response{}
	marshall_Tags_rsp(rsp, ret0)
	return rsp, nil
}

