// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package cartservice

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - CustomerID
//  - Item
type CartService_AddItem_Request struct {
  CustomerID string `thrift:"customerID,1" db:"customerID" json:"customerID"`
  Item *Item `thrift:"item,2" db:"item" json:"item"`
}

func NewCartService_AddItem_Request() *CartService_AddItem_Request {
  return &CartService_AddItem_Request{}
}


func (p *CartService_AddItem_Request) GetCustomerID() string {
  return p.CustomerID
}
var CartService_AddItem_Request_Item_DEFAULT *Item
func (p *CartService_AddItem_Request) GetItem() *Item {
  if !p.IsSetItem() {
    return CartService_AddItem_Request_Item_DEFAULT
  }
return p.Item
}
func (p *CartService_AddItem_Request) IsSetItem() bool {
  return p.Item != nil
}

func (p *CartService_AddItem_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_AddItem_Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CustomerID = v
}
  return nil
}

func (p *CartService_AddItem_Request)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &Item{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *CartService_AddItem_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_AddItem_Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_AddItem_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customerID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:customerID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CustomerID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customerID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:customerID: ", p), err) }
  return err
}

func (p *CartService_AddItem_Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *CartService_AddItem_Request) Equals(other *CartService_AddItem_Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CustomerID != other.CustomerID { return false }
  if !p.Item.Equals(other.Item) { return false }
  return true
}

func (p *CartService_AddItem_Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_AddItem_Request(%+v)", *p)
}

// Attributes:
//  - Ret0
type CartService_AddItem_Response struct {
  Ret0 *Item `thrift:"ret0,1" db:"ret0" json:"ret0"`
}

func NewCartService_AddItem_Response() *CartService_AddItem_Response {
  return &CartService_AddItem_Response{}
}

var CartService_AddItem_Response_Ret0_DEFAULT *Item
func (p *CartService_AddItem_Response) GetRet0() *Item {
  if !p.IsSetRet0() {
    return CartService_AddItem_Response_Ret0_DEFAULT
  }
return p.Ret0
}
func (p *CartService_AddItem_Response) IsSetRet0() bool {
  return p.Ret0 != nil
}

func (p *CartService_AddItem_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_AddItem_Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ret0 = &Item{}
  if err := p.Ret0.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ret0), err)
  }
  return nil
}

func (p *CartService_AddItem_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_AddItem_Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_AddItem_Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ret0", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ret0: ", p), err) }
  if err := p.Ret0.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ret0), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ret0: ", p), err) }
  return err
}

func (p *CartService_AddItem_Response) Equals(other *CartService_AddItem_Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Ret0.Equals(other.Ret0) { return false }
  return true
}

func (p *CartService_AddItem_Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_AddItem_Response(%+v)", *p)
}

// Attributes:
//  - CustomerID
type CartService_DeleteCart_Request struct {
  CustomerID string `thrift:"customerID,1" db:"customerID" json:"customerID"`
}

func NewCartService_DeleteCart_Request() *CartService_DeleteCart_Request {
  return &CartService_DeleteCart_Request{}
}


func (p *CartService_DeleteCart_Request) GetCustomerID() string {
  return p.CustomerID
}
func (p *CartService_DeleteCart_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_DeleteCart_Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CustomerID = v
}
  return nil
}

func (p *CartService_DeleteCart_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_DeleteCart_Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_DeleteCart_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customerID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:customerID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CustomerID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customerID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:customerID: ", p), err) }
  return err
}

func (p *CartService_DeleteCart_Request) Equals(other *CartService_DeleteCart_Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CustomerID != other.CustomerID { return false }
  return true
}

func (p *CartService_DeleteCart_Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_DeleteCart_Request(%+v)", *p)
}

type CartService_DeleteCart_Response struct {
}

func NewCartService_DeleteCart_Response() *CartService_DeleteCart_Response {
  return &CartService_DeleteCart_Response{}
}

func (p *CartService_DeleteCart_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_DeleteCart_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_DeleteCart_Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_DeleteCart_Response) Equals(other *CartService_DeleteCart_Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CartService_DeleteCart_Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_DeleteCart_Response(%+v)", *p)
}

// Attributes:
//  - CustomerID
type CartService_GetCart_Request struct {
  CustomerID string `thrift:"customerID,1" db:"customerID" json:"customerID"`
}

func NewCartService_GetCart_Request() *CartService_GetCart_Request {
  return &CartService_GetCart_Request{}
}


func (p *CartService_GetCart_Request) GetCustomerID() string {
  return p.CustomerID
}
func (p *CartService_GetCart_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_GetCart_Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CustomerID = v
}
  return nil
}

func (p *CartService_GetCart_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_GetCart_Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_GetCart_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customerID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:customerID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CustomerID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customerID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:customerID: ", p), err) }
  return err
}

func (p *CartService_GetCart_Request) Equals(other *CartService_GetCart_Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CustomerID != other.CustomerID { return false }
  return true
}

func (p *CartService_GetCart_Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_GetCart_Request(%+v)", *p)
}

// Attributes:
//  - Ret0
type CartService_GetCart_Response struct {
  Ret0 []*Item `thrift:"ret0,1" db:"ret0" json:"ret0"`
}

func NewCartService_GetCart_Response() *CartService_GetCart_Response {
  return &CartService_GetCart_Response{}
}


func (p *CartService_GetCart_Response) GetRet0() []*Item {
  return p.Ret0
}
func (p *CartService_GetCart_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_GetCart_Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Item, 0, size)
  p.Ret0 =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Item{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Ret0 = append(p.Ret0, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CartService_GetCart_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_GetCart_Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_GetCart_Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ret0", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ret0: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Ret0)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ret0 {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ret0: ", p), err) }
  return err
}

func (p *CartService_GetCart_Response) Equals(other *CartService_GetCart_Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Ret0) != len(other.Ret0) { return false }
  for i, _tgt := range p.Ret0 {
    _src1 := other.Ret0[i]
    if !_tgt.Equals(_src1) { return false }
  }
  return true
}

func (p *CartService_GetCart_Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_GetCart_Response(%+v)", *p)
}

// Attributes:
//  - CustomerID
//  - ItemID
type CartService_GetItem_Request struct {
  CustomerID string `thrift:"customerID,1" db:"customerID" json:"customerID"`
  ItemID string `thrift:"itemID,2" db:"itemID" json:"itemID"`
}

func NewCartService_GetItem_Request() *CartService_GetItem_Request {
  return &CartService_GetItem_Request{}
}


func (p *CartService_GetItem_Request) GetCustomerID() string {
  return p.CustomerID
}

func (p *CartService_GetItem_Request) GetItemID() string {
  return p.ItemID
}
func (p *CartService_GetItem_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_GetItem_Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CustomerID = v
}
  return nil
}

func (p *CartService_GetItem_Request)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ItemID = v
}
  return nil
}

func (p *CartService_GetItem_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_GetItem_Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_GetItem_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customerID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:customerID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CustomerID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customerID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:customerID: ", p), err) }
  return err
}

func (p *CartService_GetItem_Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ItemID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemID: ", p), err) }
  return err
}

func (p *CartService_GetItem_Request) Equals(other *CartService_GetItem_Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CustomerID != other.CustomerID { return false }
  if p.ItemID != other.ItemID { return false }
  return true
}

func (p *CartService_GetItem_Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_GetItem_Request(%+v)", *p)
}

// Attributes:
//  - Ret0
type CartService_GetItem_Response struct {
  Ret0 *Item `thrift:"ret0,1" db:"ret0" json:"ret0"`
}

func NewCartService_GetItem_Response() *CartService_GetItem_Response {
  return &CartService_GetItem_Response{}
}

var CartService_GetItem_Response_Ret0_DEFAULT *Item
func (p *CartService_GetItem_Response) GetRet0() *Item {
  if !p.IsSetRet0() {
    return CartService_GetItem_Response_Ret0_DEFAULT
  }
return p.Ret0
}
func (p *CartService_GetItem_Response) IsSetRet0() bool {
  return p.Ret0 != nil
}

func (p *CartService_GetItem_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_GetItem_Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ret0 = &Item{}
  if err := p.Ret0.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ret0), err)
  }
  return nil
}

func (p *CartService_GetItem_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_GetItem_Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_GetItem_Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ret0", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ret0: ", p), err) }
  if err := p.Ret0.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ret0), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ret0: ", p), err) }
  return err
}

func (p *CartService_GetItem_Response) Equals(other *CartService_GetItem_Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Ret0.Equals(other.Ret0) { return false }
  return true
}

func (p *CartService_GetItem_Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_GetItem_Response(%+v)", *p)
}

// Attributes:
//  - CustomerID
//  - SessionID
type CartService_MergeCarts_Request struct {
  CustomerID string `thrift:"customerID,1" db:"customerID" json:"customerID"`
  SessionID string `thrift:"sessionID,2" db:"sessionID" json:"sessionID"`
}

func NewCartService_MergeCarts_Request() *CartService_MergeCarts_Request {
  return &CartService_MergeCarts_Request{}
}


func (p *CartService_MergeCarts_Request) GetCustomerID() string {
  return p.CustomerID
}

func (p *CartService_MergeCarts_Request) GetSessionID() string {
  return p.SessionID
}
func (p *CartService_MergeCarts_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_MergeCarts_Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CustomerID = v
}
  return nil
}

func (p *CartService_MergeCarts_Request)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionID = v
}
  return nil
}

func (p *CartService_MergeCarts_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_MergeCarts_Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_MergeCarts_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customerID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:customerID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CustomerID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customerID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:customerID: ", p), err) }
  return err
}

func (p *CartService_MergeCarts_Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionID: ", p), err) }
  return err
}

func (p *CartService_MergeCarts_Request) Equals(other *CartService_MergeCarts_Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CustomerID != other.CustomerID { return false }
  if p.SessionID != other.SessionID { return false }
  return true
}

func (p *CartService_MergeCarts_Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_MergeCarts_Request(%+v)", *p)
}

type CartService_MergeCarts_Response struct {
}

func NewCartService_MergeCarts_Response() *CartService_MergeCarts_Response {
  return &CartService_MergeCarts_Response{}
}

func (p *CartService_MergeCarts_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_MergeCarts_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_MergeCarts_Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_MergeCarts_Response) Equals(other *CartService_MergeCarts_Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CartService_MergeCarts_Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_MergeCarts_Response(%+v)", *p)
}

// Attributes:
//  - CustomerID
//  - ItemID
type CartService_RemoveItem_Request struct {
  CustomerID string `thrift:"customerID,1" db:"customerID" json:"customerID"`
  ItemID string `thrift:"itemID,2" db:"itemID" json:"itemID"`
}

func NewCartService_RemoveItem_Request() *CartService_RemoveItem_Request {
  return &CartService_RemoveItem_Request{}
}


func (p *CartService_RemoveItem_Request) GetCustomerID() string {
  return p.CustomerID
}

func (p *CartService_RemoveItem_Request) GetItemID() string {
  return p.ItemID
}
func (p *CartService_RemoveItem_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_RemoveItem_Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CustomerID = v
}
  return nil
}

func (p *CartService_RemoveItem_Request)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ItemID = v
}
  return nil
}

func (p *CartService_RemoveItem_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_RemoveItem_Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_RemoveItem_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customerID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:customerID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CustomerID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customerID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:customerID: ", p), err) }
  return err
}

func (p *CartService_RemoveItem_Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ItemID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemID: ", p), err) }
  return err
}

func (p *CartService_RemoveItem_Request) Equals(other *CartService_RemoveItem_Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CustomerID != other.CustomerID { return false }
  if p.ItemID != other.ItemID { return false }
  return true
}

func (p *CartService_RemoveItem_Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_RemoveItem_Request(%+v)", *p)
}

type CartService_RemoveItem_Response struct {
}

func NewCartService_RemoveItem_Response() *CartService_RemoveItem_Response {
  return &CartService_RemoveItem_Response{}
}

func (p *CartService_RemoveItem_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_RemoveItem_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_RemoveItem_Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_RemoveItem_Response) Equals(other *CartService_RemoveItem_Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CartService_RemoveItem_Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_RemoveItem_Response(%+v)", *p)
}

// Attributes:
//  - CustomerID
//  - Item
type CartService_UpdateItem_Request struct {
  CustomerID string `thrift:"customerID,1" db:"customerID" json:"customerID"`
  Item *Item `thrift:"item,2" db:"item" json:"item"`
}

func NewCartService_UpdateItem_Request() *CartService_UpdateItem_Request {
  return &CartService_UpdateItem_Request{}
}


func (p *CartService_UpdateItem_Request) GetCustomerID() string {
  return p.CustomerID
}
var CartService_UpdateItem_Request_Item_DEFAULT *Item
func (p *CartService_UpdateItem_Request) GetItem() *Item {
  if !p.IsSetItem() {
    return CartService_UpdateItem_Request_Item_DEFAULT
  }
return p.Item
}
func (p *CartService_UpdateItem_Request) IsSetItem() bool {
  return p.Item != nil
}

func (p *CartService_UpdateItem_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_UpdateItem_Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CustomerID = v
}
  return nil
}

func (p *CartService_UpdateItem_Request)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &Item{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *CartService_UpdateItem_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_UpdateItem_Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_UpdateItem_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customerID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:customerID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CustomerID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customerID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:customerID: ", p), err) }
  return err
}

func (p *CartService_UpdateItem_Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *CartService_UpdateItem_Request) Equals(other *CartService_UpdateItem_Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CustomerID != other.CustomerID { return false }
  if !p.Item.Equals(other.Item) { return false }
  return true
}

func (p *CartService_UpdateItem_Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_UpdateItem_Request(%+v)", *p)
}

type CartService_UpdateItem_Response struct {
}

func NewCartService_UpdateItem_Response() *CartService_UpdateItem_Response {
  return &CartService_UpdateItem_Response{}
}

func (p *CartService_UpdateItem_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartService_UpdateItem_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CartService_UpdateItem_Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartService_UpdateItem_Response) Equals(other *CartService_UpdateItem_Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CartService_UpdateItem_Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartService_UpdateItem_Response(%+v)", *p)
}

// Attributes:
//  - ID
//  - Quantity
//  - UnitPrice
type Item struct {
  ID string `thrift:"ID,1" db:"ID" json:"ID"`
  Quantity int32 `thrift:"Quantity,2" db:"Quantity" json:"Quantity"`
  UnitPrice float64 `thrift:"UnitPrice,3" db:"UnitPrice" json:"UnitPrice"`
}

func NewItem() *Item {
  return &Item{}
}


func (p *Item) GetID() string {
  return p.ID
}

func (p *Item) GetQuantity() int32 {
  return p.Quantity
}

func (p *Item) GetUnitPrice() float64 {
  return p.UnitPrice
}
func (p *Item) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Item)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Item)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Quantity = v
}
  return nil
}

func (p *Item)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UnitPrice = v
}
  return nil
}

func (p *Item) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Item"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Item) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err) }
  return err
}

func (p *Item) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Quantity", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Quantity: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Quantity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Quantity (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Quantity: ", p), err) }
  return err
}

func (p *Item) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "UnitPrice", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:UnitPrice: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.UnitPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UnitPrice (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:UnitPrice: ", p), err) }
  return err
}

func (p *Item) Equals(other *Item) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.Quantity != other.Quantity { return false }
  if p.UnitPrice != other.UnitPrice { return false }
  return true
}

func (p *Item) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Item(%+v)", *p)
}

type CartService interface {
  // Parameters:
  //  - Req
  AddItem(ctx context.Context, req *CartService_AddItem_Request) (_r *CartService_AddItem_Response, _err error)
  // Parameters:
  //  - Req
  DeleteCart(ctx context.Context, req *CartService_DeleteCart_Request) (_r *CartService_DeleteCart_Response, _err error)
  // Parameters:
  //  - Req
  GetCart(ctx context.Context, req *CartService_GetCart_Request) (_r *CartService_GetCart_Response, _err error)
  // Parameters:
  //  - Req
  GetItem(ctx context.Context, req *CartService_GetItem_Request) (_r *CartService_GetItem_Response, _err error)
  // Parameters:
  //  - Req
  MergeCarts(ctx context.Context, req *CartService_MergeCarts_Request) (_r *CartService_MergeCarts_Response, _err error)
  // Parameters:
  //  - Req
  RemoveItem(ctx context.Context, req *CartService_RemoveItem_Request) (_r *CartService_RemoveItem_Response, _err error)
  // Parameters:
  //  - Req
  UpdateItem(ctx context.Context, req *CartService_UpdateItem_Request) (_r *CartService_UpdateItem_Response, _err error)
}

type CartServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewCartServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CartServiceClient {
  return &CartServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCartServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CartServiceClient {
  return &CartServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCartServiceClient(c thrift.TClient) *CartServiceClient {
  return &CartServiceClient{
    c: c,
  }
}

func (p *CartServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *CartServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *CartServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *CartServiceClient) AddItem(ctx context.Context, req *CartService_AddItem_Request) (_r *CartService_AddItem_Response, _err error) {
  var _args2 CartServiceAddItemArgs
  _args2.Req = req
  var _result4 CartServiceAddItemResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "AddItem", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  if _ret5 := _result4.GetSuccess(); _ret5 != nil {
    return _ret5, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "AddItem failed: unknown result")
}

// Parameters:
//  - Req
func (p *CartServiceClient) DeleteCart(ctx context.Context, req *CartService_DeleteCart_Request) (_r *CartService_DeleteCart_Response, _err error) {
  var _args6 CartServiceDeleteCartArgs
  _args6.Req = req
  var _result8 CartServiceDeleteCartResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "DeleteCart", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DeleteCart failed: unknown result")
}

// Parameters:
//  - Req
func (p *CartServiceClient) GetCart(ctx context.Context, req *CartService_GetCart_Request) (_r *CartService_GetCart_Response, _err error) {
  var _args10 CartServiceGetCartArgs
  _args10.Req = req
  var _result12 CartServiceGetCartResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "GetCart", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  if _ret13 := _result12.GetSuccess(); _ret13 != nil {
    return _ret13, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "GetCart failed: unknown result")
}

// Parameters:
//  - Req
func (p *CartServiceClient) GetItem(ctx context.Context, req *CartService_GetItem_Request) (_r *CartService_GetItem_Response, _err error) {
  var _args14 CartServiceGetItemArgs
  _args14.Req = req
  var _result16 CartServiceGetItemResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "GetItem", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  if _ret17 := _result16.GetSuccess(); _ret17 != nil {
    return _ret17, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "GetItem failed: unknown result")
}

// Parameters:
//  - Req
func (p *CartServiceClient) MergeCarts(ctx context.Context, req *CartService_MergeCarts_Request) (_r *CartService_MergeCarts_Response, _err error) {
  var _args18 CartServiceMergeCartsArgs
  _args18.Req = req
  var _result20 CartServiceMergeCartsResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "MergeCarts", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  if _ret21 := _result20.GetSuccess(); _ret21 != nil {
    return _ret21, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "MergeCarts failed: unknown result")
}

// Parameters:
//  - Req
func (p *CartServiceClient) RemoveItem(ctx context.Context, req *CartService_RemoveItem_Request) (_r *CartService_RemoveItem_Response, _err error) {
  var _args22 CartServiceRemoveItemArgs
  _args22.Req = req
  var _result24 CartServiceRemoveItemResult
  var _meta23 thrift.ResponseMeta
  _meta23, _err = p.Client_().Call(ctx, "RemoveItem", &_args22, &_result24)
  p.SetLastResponseMeta_(_meta23)
  if _err != nil {
    return
  }
  if _ret25 := _result24.GetSuccess(); _ret25 != nil {
    return _ret25, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "RemoveItem failed: unknown result")
}

// Parameters:
//  - Req
func (p *CartServiceClient) UpdateItem(ctx context.Context, req *CartService_UpdateItem_Request) (_r *CartService_UpdateItem_Response, _err error) {
  var _args26 CartServiceUpdateItemArgs
  _args26.Req = req
  var _result28 CartServiceUpdateItemResult
  var _meta27 thrift.ResponseMeta
  _meta27, _err = p.Client_().Call(ctx, "UpdateItem", &_args26, &_result28)
  p.SetLastResponseMeta_(_meta27)
  if _err != nil {
    return
  }
  if _ret29 := _result28.GetSuccess(); _ret29 != nil {
    return _ret29, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "UpdateItem failed: unknown result")
}

type CartServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CartService
}

func (p *CartServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CartServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CartServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCartServiceProcessor(handler CartService) *CartServiceProcessor {

  self30 := &CartServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self30.processorMap["AddItem"] = &cartServiceProcessorAddItem{handler:handler}
  self30.processorMap["DeleteCart"] = &cartServiceProcessorDeleteCart{handler:handler}
  self30.processorMap["GetCart"] = &cartServiceProcessorGetCart{handler:handler}
  self30.processorMap["GetItem"] = &cartServiceProcessorGetItem{handler:handler}
  self30.processorMap["MergeCarts"] = &cartServiceProcessorMergeCarts{handler:handler}
  self30.processorMap["RemoveItem"] = &cartServiceProcessorRemoveItem{handler:handler}
  self30.processorMap["UpdateItem"] = &cartServiceProcessorUpdateItem{handler:handler}
return self30
}

func (p *CartServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x31 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x31.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x31

}

type cartServiceProcessorAddItem struct {
  handler CartService
}

func (p *cartServiceProcessorAddItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CartServiceAddItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "AddItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CartServiceAddItemResult{}
  var retval *CartService_AddItem_Response
  if retval, err2 = p.handler.AddItem(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "AddItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "AddItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type cartServiceProcessorDeleteCart struct {
  handler CartService
}

func (p *cartServiceProcessorDeleteCart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CartServiceDeleteCartArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DeleteCart", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CartServiceDeleteCartResult{}
  var retval *CartService_DeleteCart_Response
  if retval, err2 = p.handler.DeleteCart(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCart: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DeleteCart", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DeleteCart", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type cartServiceProcessorGetCart struct {
  handler CartService
}

func (p *cartServiceProcessorGetCart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CartServiceGetCartArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "GetCart", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CartServiceGetCartResult{}
  var retval *CartService_GetCart_Response
  if retval, err2 = p.handler.GetCart(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCart: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "GetCart", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "GetCart", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type cartServiceProcessorGetItem struct {
  handler CartService
}

func (p *cartServiceProcessorGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CartServiceGetItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "GetItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CartServiceGetItemResult{}
  var retval *CartService_GetItem_Response
  if retval, err2 = p.handler.GetItem(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "GetItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "GetItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type cartServiceProcessorMergeCarts struct {
  handler CartService
}

func (p *cartServiceProcessorMergeCarts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CartServiceMergeCartsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "MergeCarts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CartServiceMergeCartsResult{}
  var retval *CartService_MergeCarts_Response
  if retval, err2 = p.handler.MergeCarts(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MergeCarts: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "MergeCarts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "MergeCarts", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type cartServiceProcessorRemoveItem struct {
  handler CartService
}

func (p *cartServiceProcessorRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CartServiceRemoveItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "RemoveItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CartServiceRemoveItemResult{}
  var retval *CartService_RemoveItem_Response
  if retval, err2 = p.handler.RemoveItem(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "RemoveItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "RemoveItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type cartServiceProcessorUpdateItem struct {
  handler CartService
}

func (p *cartServiceProcessorUpdateItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CartServiceUpdateItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UpdateItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CartServiceUpdateItemResult{}
  var retval *CartService_UpdateItem_Response
  if retval, err2 = p.handler.UpdateItem(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "UpdateItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "UpdateItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type CartServiceAddItemArgs struct {
  Req *CartService_AddItem_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewCartServiceAddItemArgs() *CartServiceAddItemArgs {
  return &CartServiceAddItemArgs{}
}

var CartServiceAddItemArgs_Req_DEFAULT *CartService_AddItem_Request
func (p *CartServiceAddItemArgs) GetReq() *CartService_AddItem_Request {
  if !p.IsSetReq() {
    return CartServiceAddItemArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CartServiceAddItemArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CartServiceAddItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceAddItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CartService_AddItem_Request{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CartServiceAddItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceAddItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CartServiceAddItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceAddItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CartServiceAddItemResult struct {
  Success *CartService_AddItem_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCartServiceAddItemResult() *CartServiceAddItemResult {
  return &CartServiceAddItemResult{}
}

var CartServiceAddItemResult_Success_DEFAULT *CartService_AddItem_Response
func (p *CartServiceAddItemResult) GetSuccess() *CartService_AddItem_Response {
  if !p.IsSetSuccess() {
    return CartServiceAddItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *CartServiceAddItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CartServiceAddItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceAddItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CartService_AddItem_Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CartServiceAddItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceAddItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CartServiceAddItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceAddItemResult(%+v)", *p)
}

// Attributes:
//  - Req
type CartServiceDeleteCartArgs struct {
  Req *CartService_DeleteCart_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewCartServiceDeleteCartArgs() *CartServiceDeleteCartArgs {
  return &CartServiceDeleteCartArgs{}
}

var CartServiceDeleteCartArgs_Req_DEFAULT *CartService_DeleteCart_Request
func (p *CartServiceDeleteCartArgs) GetReq() *CartService_DeleteCart_Request {
  if !p.IsSetReq() {
    return CartServiceDeleteCartArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CartServiceDeleteCartArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CartServiceDeleteCartArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceDeleteCartArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CartService_DeleteCart_Request{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CartServiceDeleteCartArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteCart_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceDeleteCartArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CartServiceDeleteCartArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceDeleteCartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CartServiceDeleteCartResult struct {
  Success *CartService_DeleteCart_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCartServiceDeleteCartResult() *CartServiceDeleteCartResult {
  return &CartServiceDeleteCartResult{}
}

var CartServiceDeleteCartResult_Success_DEFAULT *CartService_DeleteCart_Response
func (p *CartServiceDeleteCartResult) GetSuccess() *CartService_DeleteCart_Response {
  if !p.IsSetSuccess() {
    return CartServiceDeleteCartResult_Success_DEFAULT
  }
return p.Success
}
func (p *CartServiceDeleteCartResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CartServiceDeleteCartResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceDeleteCartResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CartService_DeleteCart_Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CartServiceDeleteCartResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteCart_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceDeleteCartResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CartServiceDeleteCartResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceDeleteCartResult(%+v)", *p)
}

// Attributes:
//  - Req
type CartServiceGetCartArgs struct {
  Req *CartService_GetCart_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewCartServiceGetCartArgs() *CartServiceGetCartArgs {
  return &CartServiceGetCartArgs{}
}

var CartServiceGetCartArgs_Req_DEFAULT *CartService_GetCart_Request
func (p *CartServiceGetCartArgs) GetReq() *CartService_GetCart_Request {
  if !p.IsSetReq() {
    return CartServiceGetCartArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CartServiceGetCartArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CartServiceGetCartArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceGetCartArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CartService_GetCart_Request{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CartServiceGetCartArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetCart_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceGetCartArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CartServiceGetCartArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceGetCartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CartServiceGetCartResult struct {
  Success *CartService_GetCart_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCartServiceGetCartResult() *CartServiceGetCartResult {
  return &CartServiceGetCartResult{}
}

var CartServiceGetCartResult_Success_DEFAULT *CartService_GetCart_Response
func (p *CartServiceGetCartResult) GetSuccess() *CartService_GetCart_Response {
  if !p.IsSetSuccess() {
    return CartServiceGetCartResult_Success_DEFAULT
  }
return p.Success
}
func (p *CartServiceGetCartResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CartServiceGetCartResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceGetCartResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CartService_GetCart_Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CartServiceGetCartResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetCart_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceGetCartResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CartServiceGetCartResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceGetCartResult(%+v)", *p)
}

// Attributes:
//  - Req
type CartServiceGetItemArgs struct {
  Req *CartService_GetItem_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewCartServiceGetItemArgs() *CartServiceGetItemArgs {
  return &CartServiceGetItemArgs{}
}

var CartServiceGetItemArgs_Req_DEFAULT *CartService_GetItem_Request
func (p *CartServiceGetItemArgs) GetReq() *CartService_GetItem_Request {
  if !p.IsSetReq() {
    return CartServiceGetItemArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CartServiceGetItemArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CartServiceGetItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceGetItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CartService_GetItem_Request{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CartServiceGetItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceGetItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CartServiceGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CartServiceGetItemResult struct {
  Success *CartService_GetItem_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCartServiceGetItemResult() *CartServiceGetItemResult {
  return &CartServiceGetItemResult{}
}

var CartServiceGetItemResult_Success_DEFAULT *CartService_GetItem_Response
func (p *CartServiceGetItemResult) GetSuccess() *CartService_GetItem_Response {
  if !p.IsSetSuccess() {
    return CartServiceGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *CartServiceGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CartServiceGetItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceGetItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CartService_GetItem_Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CartServiceGetItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceGetItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CartServiceGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceGetItemResult(%+v)", *p)
}

// Attributes:
//  - Req
type CartServiceMergeCartsArgs struct {
  Req *CartService_MergeCarts_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewCartServiceMergeCartsArgs() *CartServiceMergeCartsArgs {
  return &CartServiceMergeCartsArgs{}
}

var CartServiceMergeCartsArgs_Req_DEFAULT *CartService_MergeCarts_Request
func (p *CartServiceMergeCartsArgs) GetReq() *CartService_MergeCarts_Request {
  if !p.IsSetReq() {
    return CartServiceMergeCartsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CartServiceMergeCartsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CartServiceMergeCartsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceMergeCartsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CartService_MergeCarts_Request{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CartServiceMergeCartsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MergeCarts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceMergeCartsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CartServiceMergeCartsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceMergeCartsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CartServiceMergeCartsResult struct {
  Success *CartService_MergeCarts_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCartServiceMergeCartsResult() *CartServiceMergeCartsResult {
  return &CartServiceMergeCartsResult{}
}

var CartServiceMergeCartsResult_Success_DEFAULT *CartService_MergeCarts_Response
func (p *CartServiceMergeCartsResult) GetSuccess() *CartService_MergeCarts_Response {
  if !p.IsSetSuccess() {
    return CartServiceMergeCartsResult_Success_DEFAULT
  }
return p.Success
}
func (p *CartServiceMergeCartsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CartServiceMergeCartsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceMergeCartsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CartService_MergeCarts_Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CartServiceMergeCartsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MergeCarts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceMergeCartsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CartServiceMergeCartsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceMergeCartsResult(%+v)", *p)
}

// Attributes:
//  - Req
type CartServiceRemoveItemArgs struct {
  Req *CartService_RemoveItem_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewCartServiceRemoveItemArgs() *CartServiceRemoveItemArgs {
  return &CartServiceRemoveItemArgs{}
}

var CartServiceRemoveItemArgs_Req_DEFAULT *CartService_RemoveItem_Request
func (p *CartServiceRemoveItemArgs) GetReq() *CartService_RemoveItem_Request {
  if !p.IsSetReq() {
    return CartServiceRemoveItemArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CartServiceRemoveItemArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CartServiceRemoveItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceRemoveItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CartService_RemoveItem_Request{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CartServiceRemoveItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RemoveItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceRemoveItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CartServiceRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CartServiceRemoveItemResult struct {
  Success *CartService_RemoveItem_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCartServiceRemoveItemResult() *CartServiceRemoveItemResult {
  return &CartServiceRemoveItemResult{}
}

var CartServiceRemoveItemResult_Success_DEFAULT *CartService_RemoveItem_Response
func (p *CartServiceRemoveItemResult) GetSuccess() *CartService_RemoveItem_Response {
  if !p.IsSetSuccess() {
    return CartServiceRemoveItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *CartServiceRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CartServiceRemoveItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceRemoveItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CartService_RemoveItem_Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CartServiceRemoveItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RemoveItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceRemoveItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CartServiceRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - Req
type CartServiceUpdateItemArgs struct {
  Req *CartService_UpdateItem_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewCartServiceUpdateItemArgs() *CartServiceUpdateItemArgs {
  return &CartServiceUpdateItemArgs{}
}

var CartServiceUpdateItemArgs_Req_DEFAULT *CartService_UpdateItem_Request
func (p *CartServiceUpdateItemArgs) GetReq() *CartService_UpdateItem_Request {
  if !p.IsSetReq() {
    return CartServiceUpdateItemArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CartServiceUpdateItemArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CartServiceUpdateItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceUpdateItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CartService_UpdateItem_Request{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CartServiceUpdateItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceUpdateItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CartServiceUpdateItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceUpdateItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CartServiceUpdateItemResult struct {
  Success *CartService_UpdateItem_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCartServiceUpdateItemResult() *CartServiceUpdateItemResult {
  return &CartServiceUpdateItemResult{}
}

var CartServiceUpdateItemResult_Success_DEFAULT *CartService_UpdateItem_Response
func (p *CartServiceUpdateItemResult) GetSuccess() *CartService_UpdateItem_Response {
  if !p.IsSetSuccess() {
    return CartServiceUpdateItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *CartServiceUpdateItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CartServiceUpdateItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CartServiceUpdateItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CartService_UpdateItem_Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CartServiceUpdateItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CartServiceUpdateItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CartServiceUpdateItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CartServiceUpdateItemResult(%+v)", *p)
}


