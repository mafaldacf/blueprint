// Blueprint: Auto-generated by Thrift Plugin
package thrift

import (
	"context"
	"time"
	"errors"
	"github.com/apache/thrift/lib/go/thrift"
	"blueprint/goproc/order_service_proc/thrift/cartservice"
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
)

type CartService_ThriftClient struct {
	sockshop3.CartService
	Client *cartservice.CartServiceClient // The actual thrift-generated client
	Timeout time.Duration
	Address string
}

func New_CartService_ThriftClient(ctx context.Context, serverAddress string) (*CartService_ThriftClient, error) {
	handler := &CartService_ThriftClient{}
	handler.Address = serverAddress
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactory(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TTransport
	var err error
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	transport, err = thrift.NewTSocketTimeout(handler.Address, duration, duration)
	if err != nil {
		return nil, err
	}
	transport, err = transportFactory.GetTransport(transport)
	if err != nil {
		return nil, err
	}
	err = transport.Open()
	if err != nil {
		return nil, err
	}
	iprot := protocolFactory.GetProtocol(transport)
	oprot := protocolFactory.GetProtocol(transport)

	client := cartservice.NewCartServiceClient(thrift.NewTStandardClient(iprot, oprot))
	handler.Client = client
	handler.Timeout = duration
	return handler, nil
}


func (client *CartService_ThriftClient) AddItem(ctx context.Context, customerID string, item sockshop3.Item) (ret0 sockshop3.Item, err error) {
	// Create and marshall the thrift Request object
	req := &cartservice.CartService_AddItem_Request{}
	marshall_AddItem_req(req, customerID, item)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.AddItem(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_AddItem_rsp(rsp)
	return
}

func (client *CartService_ThriftClient) DeleteCart(ctx context.Context, customerID string) (err error) {
	// Create and marshall the thrift Request object
	req := &cartservice.CartService_DeleteCart_Request{}
	marshall_DeleteCart_req(req, customerID)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.DeleteCart(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	 unmarshall_DeleteCart_rsp(rsp)
	return
}

func (client *CartService_ThriftClient) GetCart(ctx context.Context, customerID string) (ret0 []sockshop3.Item, err error) {
	// Create and marshall the thrift Request object
	req := &cartservice.CartService_GetCart_Request{}
	marshall_GetCart_req(req, customerID)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.GetCart(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_GetCart_rsp(rsp)
	return
}

func (client *CartService_ThriftClient) GetItem(ctx context.Context, customerID string, itemID string) (ret0 sockshop3.Item, err error) {
	// Create and marshall the thrift Request object
	req := &cartservice.CartService_GetItem_Request{}
	marshall_GetItem_req(req, customerID, itemID)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.GetItem(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_GetItem_rsp(rsp)
	return
}

func (client *CartService_ThriftClient) MergeCarts(ctx context.Context, customerID string, sessionID string) (err error) {
	// Create and marshall the thrift Request object
	req := &cartservice.CartService_MergeCarts_Request{}
	marshall_MergeCarts_req(req, customerID, sessionID)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.MergeCarts(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	 unmarshall_MergeCarts_rsp(rsp)
	return
}

func (client *CartService_ThriftClient) RemoveItem(ctx context.Context, customerID string, itemID string) (err error) {
	// Create and marshall the thrift Request object
	req := &cartservice.CartService_RemoveItem_Request{}
	marshall_RemoveItem_req(req, customerID, itemID)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.RemoveItem(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	 unmarshall_RemoveItem_rsp(rsp)
	return
}

func (client *CartService_ThriftClient) UpdateItem(ctx context.Context, customerID string, item sockshop3.Item) (err error) {
	// Create and marshall the thrift Request object
	req := &cartservice.CartService_UpdateItem_Request{}
	marshall_UpdateItem_req(req, customerID, item)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.UpdateItem(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	 unmarshall_UpdateItem_rsp(rsp)
	return
}

