// Blueprint: Auto-generated by Thrift Plugin
package thrift

import (
	"github.com/apache/thrift/lib/go/thrift"
	"blueprint/goproc/order_service_proc/thrift/userservice"
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
	"context"
	"time"
	"errors"
)

type UserService_ThriftClient struct {
	sockshop3.UserService
	Client *userservice.UserServiceClient // The actual thrift-generated client
	Timeout time.Duration
	Address string
}

func New_UserService_ThriftClient(ctx context.Context, serverAddress string) (*UserService_ThriftClient, error) {
	handler := &UserService_ThriftClient{}
	handler.Address = serverAddress
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactory(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TTransport
	var err error
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	transport, err = thrift.NewTSocketTimeout(handler.Address, duration, duration)
	if err != nil {
		return nil, err
	}
	transport, err = transportFactory.GetTransport(transport)
	if err != nil {
		return nil, err
	}
	err = transport.Open()
	if err != nil {
		return nil, err
	}
	iprot := protocolFactory.GetProtocol(transport)
	oprot := protocolFactory.GetProtocol(transport)

	client := userservice.NewUserServiceClient(thrift.NewTStandardClient(iprot, oprot))
	handler.Client = client
	handler.Timeout = duration
	return handler, nil
}


func (client *UserService_ThriftClient) Delete(ctx context.Context, entity string, id string) (err error) {
	// Create and marshall the thrift Request object
	req := &userservice.UserService_Delete_Request{}
	marshall_Delete_req(req, entity, id)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.Delete(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	 unmarshall_Delete_rsp(rsp)
	return
}

func (client *UserService_ThriftClient) GetAddresses(ctx context.Context, id string) (ret0 []sockshop3.Address, err error) {
	// Create and marshall the thrift Request object
	req := &userservice.UserService_GetAddresses_Request{}
	marshall_GetAddresses_req(req, id)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.GetAddresses(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_GetAddresses_rsp(rsp)
	return
}

func (client *UserService_ThriftClient) GetCards(ctx context.Context, cardid string) (ret0 []sockshop3.Card, err error) {
	// Create and marshall the thrift Request object
	req := &userservice.UserService_GetCards_Request{}
	marshall_GetCards_req(req, cardid)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.GetCards(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_GetCards_rsp(rsp)
	return
}

func (client *UserService_ThriftClient) GetUsers(ctx context.Context, id string) (ret0 []sockshop3.User, err error) {
	// Create and marshall the thrift Request object
	req := &userservice.UserService_GetUsers_Request{}
	marshall_GetUsers_req(req, id)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.GetUsers(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_GetUsers_rsp(rsp)
	return
}

func (client *UserService_ThriftClient) Login(ctx context.Context, username string, password string) (ret0 sockshop3.User, err error) {
	// Create and marshall the thrift Request object
	req := &userservice.UserService_Login_Request{}
	marshall_Login_req(req, username, password)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.Login(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_Login_rsp(rsp)
	return
}

func (client *UserService_ThriftClient) PostAddress(ctx context.Context, userid string, address sockshop3.Address) (ret0 string, err error) {
	// Create and marshall the thrift Request object
	req := &userservice.UserService_PostAddress_Request{}
	marshall_PostAddress_req(req, userid, address)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.PostAddress(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_PostAddress_rsp(rsp)
	return
}

func (client *UserService_ThriftClient) PostCard(ctx context.Context, userid string, card sockshop3.Card) (ret0 string, err error) {
	// Create and marshall the thrift Request object
	req := &userservice.UserService_PostCard_Request{}
	marshall_PostCard_req(req, userid, card)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.PostCard(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_PostCard_rsp(rsp)
	return
}

func (client *UserService_ThriftClient) PostUser(ctx context.Context, user sockshop3.User) (ret0 string, err error) {
	// Create and marshall the thrift Request object
	req := &userservice.UserService_PostUser_Request{}
	marshall_PostUser_req(req, user)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.PostUser(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_PostUser_rsp(rsp)
	return
}

func (client *UserService_ThriftClient) Register(ctx context.Context, username string, password string, email string, first string, last string) (ret0 string, err error) {
	// Create and marshall the thrift Request object
	req := &userservice.UserService_Register_Request{}
	marshall_Register_req(req, username, password, email, first, last)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.Register(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_Register_rsp(rsp)
	return
}

