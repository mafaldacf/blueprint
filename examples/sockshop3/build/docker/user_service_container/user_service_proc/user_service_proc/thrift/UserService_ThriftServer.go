// Blueprint: Auto-generated by Thrift Plugin

package thrift

import (
	"github.com/blueprint-uservices/blueprint/examples/sockshop3/workflow/sockshop3"
	"context"
	"github.com/apache/thrift/lib/go/thrift"
	"blueprint/goproc/user_service_proc/thrift/userservice"
)

type UserService_ThriftServerHandler struct {
	Service sockshop3.UserService
	Address string
}

func New_UserService_ThriftServerHandler(ctx context.Context, service sockshop3.UserService, serverAddress string) (*UserService_ThriftServerHandler, error) {
	handler := &UserService_ThriftServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is automatically called in a separate goroutine by runtime/plugins/golang/di.go
func (handler *UserService_ThriftServerHandler) Run(ctx context.Context) error {
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactory(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TServerTransport
	var err error
	transport, err = thrift.NewTServerSocket(handler.Address)
	if err != nil {
		return err
	}
	processor := userservice.NewUserServiceProcessor(handler)
	server := thrift.NewTSimpleServer4(processor, transport, transportFactory, protocolFactory)

	go func() {
		select {
		case <-ctx.Done():
			server.Stop()
		}
	}()

	return server.Serve()
}


func (handler *UserService_ThriftServerHandler) Delete(ctx context.Context, req *userservice.UserService_Delete_Request) (*userservice.UserService_Delete_Response, error) {
	entity, id := unmarshall_Delete_req(req)
	err := handler.Service.Delete(ctx, entity, id)
	if err != nil {
		return nil, err
	}
	rsp := &userservice.UserService_Delete_Response{}
	marshall_Delete_rsp(rsp, )
	return rsp, nil
}

func (handler *UserService_ThriftServerHandler) GetAddresses(ctx context.Context, req *userservice.UserService_GetAddresses_Request) (*userservice.UserService_GetAddresses_Response, error) {
	id := unmarshall_GetAddresses_req(req)
	ret0, err := handler.Service.GetAddresses(ctx, id)
	if err != nil {
		return nil, err
	}
	rsp := &userservice.UserService_GetAddresses_Response{}
	marshall_GetAddresses_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *UserService_ThriftServerHandler) GetCards(ctx context.Context, req *userservice.UserService_GetCards_Request) (*userservice.UserService_GetCards_Response, error) {
	cardid := unmarshall_GetCards_req(req)
	ret0, err := handler.Service.GetCards(ctx, cardid)
	if err != nil {
		return nil, err
	}
	rsp := &userservice.UserService_GetCards_Response{}
	marshall_GetCards_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *UserService_ThriftServerHandler) GetUsers(ctx context.Context, req *userservice.UserService_GetUsers_Request) (*userservice.UserService_GetUsers_Response, error) {
	id := unmarshall_GetUsers_req(req)
	ret0, err := handler.Service.GetUsers(ctx, id)
	if err != nil {
		return nil, err
	}
	rsp := &userservice.UserService_GetUsers_Response{}
	marshall_GetUsers_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *UserService_ThriftServerHandler) Login(ctx context.Context, req *userservice.UserService_Login_Request) (*userservice.UserService_Login_Response, error) {
	username, password := unmarshall_Login_req(req)
	ret0, err := handler.Service.Login(ctx, username, password)
	if err != nil {
		return nil, err
	}
	rsp := &userservice.UserService_Login_Response{}
	marshall_Login_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *UserService_ThriftServerHandler) PostAddress(ctx context.Context, req *userservice.UserService_PostAddress_Request) (*userservice.UserService_PostAddress_Response, error) {
	userid, address := unmarshall_PostAddress_req(req)
	ret0, err := handler.Service.PostAddress(ctx, userid, address)
	if err != nil {
		return nil, err
	}
	rsp := &userservice.UserService_PostAddress_Response{}
	marshall_PostAddress_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *UserService_ThriftServerHandler) PostCard(ctx context.Context, req *userservice.UserService_PostCard_Request) (*userservice.UserService_PostCard_Response, error) {
	userid, card := unmarshall_PostCard_req(req)
	ret0, err := handler.Service.PostCard(ctx, userid, card)
	if err != nil {
		return nil, err
	}
	rsp := &userservice.UserService_PostCard_Response{}
	marshall_PostCard_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *UserService_ThriftServerHandler) PostUser(ctx context.Context, req *userservice.UserService_PostUser_Request) (*userservice.UserService_PostUser_Response, error) {
	user := unmarshall_PostUser_req(req)
	ret0, err := handler.Service.PostUser(ctx, user)
	if err != nil {
		return nil, err
	}
	rsp := &userservice.UserService_PostUser_Response{}
	marshall_PostUser_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *UserService_ThriftServerHandler) Register(ctx context.Context, req *userservice.UserService_Register_Request) (*userservice.UserService_Register_Response, error) {
	username, password, email, first, last := unmarshall_Register_req(req)
	ret0, err := handler.Service.Register(ctx, username, password, email, first, last)
	if err != nil {
		return nil, err
	}
	rsp := &userservice.UserService_Register_Response{}
	marshall_Register_rsp(rsp, ret0)
	return rsp, nil
}

